generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  order     Order[]
  address   Address[]
  review    Review[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  imageUrl    String?
  sku         String?
  status      String      @default("active")
  stock       Int         @default(0)
  brand       String?
  orderItem   OrderItem[]
  categoryDetails    CategoryDetails[]   
  review                   Review[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  createdAt   DateTime    @default(now())
  status      String      @default("pending")
  totalAmount Decimal     @db.Decimal(10, 2)
  user        User        @relation(fields: [userId], references: [id])
  orderItem   OrderItem[]
  payment     Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal   @db.Decimal(10, 2)
  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  line1     String
  line2     String?
  city      String
  state     String
  postalCode String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model CategoryDetails {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  product  Product[]
}

model Payment {
  id         Int      @id @default(autoincrement())
  orderId    Int
  method     String   // e.g., UPI, Cash, Card, NetBanking
  status     String   @default("pending") // pending, completed, failed
  paidAt     DateTime?
  transactionId String?

  order      Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int      // 1 to 5
  comment   String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}